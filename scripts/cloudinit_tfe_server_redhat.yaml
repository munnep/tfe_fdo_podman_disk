#cloud-config
write_files:
  - path: /var/tmp/tfe.yaml
    permissions: '0640'
    content: |
      apiVersion: "v1"
      kind: "Pod"
      metadata:
        labels:
          app: "terraform-enterprise"
        name: "terraform-enterprise"
      spec:
        restartPolicy: "Never"
        containers:
        - env:
          - name: "TFE_OPERATIONAL_MODE"
            value: "disk"
          - name: "TFE_LICENSE"
            value: "${tfe_license}"
          - name: "TFE_HTTP_PORT"
            value: "8080"
          - name: "TFE_HTTPS_PORT"
            value: "8443"
          - name: "TFE_HOSTNAME"
            value: "${dns_hostname}.${dns_zonename}"
          - name: "TFE_TLS_CERT_FILE"
            value: "/etc/ssl/private/terraform-enterprise/cert.pem"
          - name: "TFE_TLS_KEY_FILE"
            value: "/etc/ssl/private/terraform-enterprise/key.pem"
          - name: "TFE_TLS_CA_BUNDLE_FILE"
            value: "/etc/ssl/private/terraform-enterprise/bundle.pem"
          - name: "TFE_DISK_CACHE_VOLUME_NAME"
            value: "terraform-enterprise_terraform-enterprise-cache"
          - name: "TFE_LICENSE_REPORTING_OPT_OUT"
            value: "true"
          - name: "TFE_ENCRYPTION_PASSWORD"
            value: "Password#1"
          image: "images.releases.hashicorp.com/hashicorp/terraform-enterprise:v202312-1"
          name: "terraform-enterprise"
          ports:
          - containerPort: 8080
            hostPort: 80
          - containerPort: 8443
            hostPort: 443
          - containerPort: 9090
            hostPort: 9090
          securityContext:
            capabilities:
              add:
              - "CAP_IPC_LOCK"
            readOnlyRootFilesystem: true
            seLinuxOptions:
              type: "spc_t"
          volumeMounts:
          - mountPath: "/etc/ssl/private/terraform-enterprise"
            name: "certs"
          - mountPath: "/var/log/terraform-enterprise"
            name: "log"
          - mountPath: "/run"
            name: "run"
          - mountPath: "/tmp"
            name: "tmp"
          - mountPath: "/var/lib/terraform-enterprise"
            name: "data"
          - mountPath: "/run/docker.sock"
            name: "docker-sock"
          - mountPath: "/var/cache/tfe-task-worker/terraform"
            name: "terraform-enterprise_terraform-enterprise-cache-pvc"
        volumes:
        - hostPath:
            path: "/opt/tfe/certs"
            type: "Directory"
          name: "certs"
        - emptyDir:
            medium: "Memory"
          name: "log"
        - emptyDir:
            medium: "Memory"
          name: "run"
        - emptyDir:
            medium: "Memory"
          name: "tmp"
        - hostPath:
            path: "/opt/tfe/data"
            type: "Directory"
          name: "data"
        - hostPath:
            path: "/var/run/docker.sock"
            type: "File"
          name: "docker-sock"
        - name: "terraform-enterprise_terraform-enterprise-cache-pvc"
          persistentVolumeClaim:
            claimName: "terraform-enterprise_terraform-enterprise-cache"
  - path: /var/tmp/install_software.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash
      # installation script for software
      
      # wait until archive is available. Wait until there is internet before continue
      until ping -c1 archive.ubuntu.com &>/dev/null; do
        echo "waiting for networking to initialise"
        sleep 3 
      done 
      
      # add public ssh key alvaro
      curl -sL https://raw.githubusercontent.com/kikitux/curl-bash/master/provision/add_github_user_public_keys.sh | GITHUB_USER=kikitux bash
      
      # add public ssh key patrick
      curl -sL https://raw.githubusercontent.com/kikitux/curl-bash/master/provision/add_github_user_public_keys.sh | GITHUB_USER=munnep bash
      
      # install netdata tool
      curl -sL https://raw.githubusercontent.com/automodule/bash/main/install_netdata.sh | bash
      
      # Set swappiness
      if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
        echo never > /sys/kernel/mm/transparent_hugepage/enabled
      fi
      
      if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
        echo never > /sys/kernel/mm/transparent_hugepage/defrag
      fi
      
      # heavy swap vm.swappiness=80
      # no swap vm.swappiness=1

      echo vm.swappiness=1 >> /etc/sysctl.conf
      echo vm.min_free_kbytes=67584 >> /etc/sysctl.conf
      echo vm.drop_caches=1 >> /etc/sysctl.conf
      sysctl -p
      
      # Select the disks to use 
      SWAP=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 | awk '{print $1}'| awk '(NR==1)')
      TFE=/dev/$(lsblk|grep nvme | grep -v nvme0n1 |sort -k 4 | awk '{print $1}'| awk '(NR==2)')
      
      # swap
      # if SWAP exists
      # we format if no format
      if [ -b $SWAP ]; then
      	blkid $SWAP
      	if [ $? -ne 0 ]; then
      		mkswap $SWAP
      	fi
      fi
      
      # if SWAP not in fstab
      # we add it
      grep "swap" /etc/fstab
      if [ $? -ne 0 ]; then
        SWAP_UUID=`blkid $SWAP| awk '{print $2}'`
      	echo "$SWAP_UUID swap swap defaults 0 0" | tee -a /etc/fstab
      	swapon -a
      fi
      
      # tfe
      # if TFE exists
      # we format if no format
      if [ -b $TFE ]; then
      	blkid $TFE
      	if [ $? -ne 0 ]; then
      		mkfs.xfs $TFE
      	fi
      fi
      
      # if TFE not in fstab
      # we add it
      grep "/opt/tfe/data" /etc/fstab
      if [ $? -ne 0 ]; then
        TFE_UUID=`blkid $TFE| awk '{print $2}'`
      	echo "$TFE_UUID /opt/tfe/data xfs defaults 0 0" | tee -a /etc/fstab
      	mkdir -p /opt/tfe/data
      	mount -a
      fi

      # install the SSM agent for remote connection
      sudo dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

      # enable the SSM service and start it 
      sudo systemctl enable amazon-ssm-agent
      sudo systemctl start amazon-ssm-agent

      # install Podman
      dnf module install -y container-tools
      dnf install -y podman-docker 

      # enable podman socket
      systemctl enable --now podman.socket
   
  - path: /var/tmp/download_and_unpack_software.sh 
    permissions: '0750'
    content: |
      #!/usr/bin/env bash

      # wait until archive is available. Wait until there is internet before continue
      until ping -c1 archive.ubuntu.com &>/dev/null; do
        echo "waiting for networking to initialise"
        sleep 3 
      done 
      
      # create directory to store the certificates
      mkdir -p /opt/tfe/certs

      # install jq
      dnf install unzip jq -y

      # install aws cli
      pushd /var/tmp
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/local/aws-cli --update
      
      aws s3 cp s3://${tag_prefix}-software/full_chain /opt/tfe/certs/cert.pem
      aws s3 cp s3://${tag_prefix}-software/full_chain /opt/tfe/certs/bundle.pem
      aws s3 cp s3://${tag_prefix}-software/private_key_pem /opt/tfe/certs/key.pem

  - path: /var/tmp/install_tfe.sh   
    permissions: '0750'
    content: |
      #!/usr/bin/env bash    

      # copy the configuration file to right location
      cp /var/tmp/tfe.yaml /opt/tfe/
      
      pushd /opt/tfe/

      
      # login to registry with podman
      echo "${tfe_license}" |  podman login --username terraform images.releases.hashicorp.com --password-stdin
      
      # Start TFE with podman
      podman play kube /opt/tfe/tfe.yaml

      # Generate the services
      pushd /etc/systemd/system/
      podman generate systemd --files --name terraform-enterprise
      systemctl enable pod-terraform-enterprise.service
      systemctl start pod-terraform-enterprise

  - path: /etc/tfe_initial_user.json
    permissions: '0755'
    content: |  
      {
          "username": "admin",
          "email": "${certificate_email}",
          "password": "${tfe_password}"
      }   
  - path: /etc/tfe_create_organization.json
    permissions: '0755'
    content: |  
      {
          "data": {
              "type": "organizations",
              "attributes": {
                  "name": "test",
                  "email": "${certificate_email}"
              }
          }
      }       
  - path: /var/tmp/tfe_setup.sh
    permissions: '0777'
    content: |
      #!/usr/bin/env bash
      
      # We have to wait for TFE be fully functioning before we can continue
      while true; do
          if curl -kI "https://${dns_hostname}.${dns_zonename}/admin" 2>&1 | grep -w "200\|301" ; 
          then
              echo "TFE is up and running"
              echo "Will continue in 1 minutes with the final steps"
              sleep 60
              break
          else
              echo "TFE is not available yet. Please wait..."
              sleep 60
          fi
      done

      # go into the directory of the tfe.yaml file
      pushd /opt/tfe/
      
      echo "Get initial activation token"
      INITIAL_TOKEN_TEMP=`podman exec -it terraform-enterprise-terraform-enterprise tfectl admin token`

      # get the admin token you can user to create the first user
      # Create the first user called admin and get the token
      INITIAL_TOKEN=`echo $INITIAL_TOKEN_TEMP | sed 's/[^A-Za-z0-9]//g' |  sed 's/^1m//;s/0m$//'` 

      echo $INITIAL_TOKEN
      curl -kg \
        --header "Content-Type: application/json" \
        --request POST \
        --data @/etc/tfe_initial_user.json \
        https://${dns_hostname}.${dns_zonename}/admin/initial-admin-user?token=$INITIAL_TOKEN | tee /etc/tfe_initial_user_output.json
      
      TOKEN=`jq -e -r .token /etc/tfe_initial_user_output.json`
      [[ $? -eq 0 && "$TOKEN" ]] || exit 1
  
      # create organization test
      curl -k \
        --header "Authorization: Bearer $TOKEN" \
        --header "Content-Type: application/vnd.api+json" \
        --request POST \
        --data @/etc/tfe_create_organization.json \
        https://${dns_hostname}.${dns_zonename}/api/v2/organizations      
runcmd:
  - sudo bash /var/tmp/install_software.sh 
  - sudo bash /var/tmp/download_and_unpack_software.sh 
  - sudo bash /var/tmp/install_tfe.sh 
  - sudo bash /var/tmp/tfe_setup.sh
